name: Unit and Integration Tests with Full Report

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run unit tests and generate reports
        run: |
          # Run tests and generate coverage reports
          npm test -- --coverage --coverageReporters=cobertura --json --outputFile=test-results.json

      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Parse test results for summary
        id: parse_test
        run: |
          # Extract summary of test results
          TOTAL_TESTS=$(jq '.numTotalTests' test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' test-results.json)
          SKIPPED_TESTS=$(jq '.numPendingTests' test-results.json)

          # Format the test results as a markdown table
          echo "### Unit Test Results Summary" > test_summary.md
          echo "| Total Tests | Passed | Failed | Skipped |" >> test_summary.md
          echo "|-------------|--------|--------|---------|" >> test_summary.md
          echo "| $TOTAL_TESTS | $PASSED_TESTS | $FAILED_TESTS | $SKIPPED_TESTS |" >> test_summary.md

      - name: Parse coverage report for summary
        id: parse_coverage
        run: |
          # Extract line coverage percentage from cobertura XML
          COVERAGE_PERCENT=$(xmllint --xpath "string(//coverage/@line-rate)" coverage/cobertura-coverage.xml)
          COVERAGE_PERCENT=$(echo "$COVERAGE_PERCENT * 100" | bc)  # Convert to percentage

          # Format the coverage summary as a markdown table
          echo "### Coverage Summary" > coverage_summary.md
          echo "| Metric        | Coverage |" >> coverage_summary.md
          echo "|---------------|----------|" >> coverage_summary.md
          echo "| Line Coverage | ${COVERAGE_PERCENT}% |" >> coverage_summary.md

      - name: Parse detailed file-level coverage
        id: parse_file_coverage
        run: |
          # Initialize file-level coverage markdown
          echo "### Detailed Coverage Report by File" > file_coverage.md
          echo "| File | Statements | Branches | Functions | Lines |" >> file_coverage.md
          echo "|------|------------|----------|-----------|-------|" >> file_coverage.md

          # Parse detailed coverage for each file
          xmllint --xpath "//class" coverage/cobertura-coverage.xml | \
          grep -oP 'filename="\K[^"]+' | \
          while read -r file; do
            # Extract metrics for each file
            stmts=$(xmllint --xpath "string(//class[@filename='$file']/@line-rate)" coverage/cobertura-coverage.xml)
            branches=$(xmllint --xpath "string(//class[@filename='$file']/@branch-rate)" coverage/cobertura-coverage.xml)
            funcs=$(xmllint --xpath "string(//class[@filename='$file']/@function-rate)" coverage/cobertura-coverage.xml)
            lines=$(xmllint --xpath "string(//class[@filename='$file']/@line-rate)" coverage/cobertura-coverage.xml)

            # Convert rates to percentages
            stmts_pct=$(echo "$stmts * 100" | bc)
            branches_pct=$(echo "$branches * 100" | bc)
            funcs_pct=$(echo "$funcs * 100" | bc)
            lines_pct=$(echo "$lines * 100" | bc)

            # Append to file-level coverage markdown
            echo "| $file | ${stmts_pct}% | ${branches_pct}% | ${funcs_pct}% | ${lines_pct}% |" >> file_coverage.md
          done

      - name: Combine summaries and post as PR comment
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read summaries from files
          TEST_SUMMARY=$(cat test_summary.md)
          COVERAGE_SUMMARY=$(cat coverage_summary.md)
          FILE_COVERAGE=$(cat file_coverage.md)

          # Add link to the detailed lcov report (index.html)
          LCOV_REPORT_LINK="View the detailed coverage report here: https://github.com/${{ github.repository }}/blob/${{ github.sha }}/coverage/lcov-report/index.html"

          # Combine summaries into the comment body
          COMMENT_BODY="$TEST_SUMMARY\n\n$COVERAGE_SUMMARY\n\n$FILE_COVERAGE\n\n$LCOV_REPORT_LINK"
          echo "Comment body to be posted:"
          echo "$COMMENT_BODY"

          # Post comment on the PR using the Issues API
          PR_NUMBER="${{ github.event.pull_request.number }}"
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
               "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")

          if [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to post comment. HTTP Status: $RESPONSE"
            echo "Response Body:"
            cat response.txt
            exit 1
          else
            echo "Comment posted successfully."
          fi
