name: Unit, Integration, and E2E Tests with Full Report

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run unit tests and generate reports
        run: |
          # Run tests and generate coverage reports
          npm test -- --coverage --coverageReporters=cobertura --json --outputFile=unit-test-results.json

      - name: Run E2E tests and generate reports
        run: |
          # Run E2E tests and generate a JSON report
          npm run test:e2e -- --json --outputFile=e2e-test-results.json

      - name: Parse unit test results for summary
        id: parse_unit_test
        run: |
          # Extract summary of unit test results
          TOTAL_TESTS=$(jq '.numTotalTests' unit-test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' unit-test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' unit-test-results.json)
          SKIPPED_TESTS=$(jq '.numPendingTests' unit-test-results.json)

          # Format the test results as a markdown table
          echo "### Unit Test Results Summary" > unit_test_summary.md
          echo "| Total Tests | Passed | Failed | Skipped |" >> unit_test_summary.md
          echo "|-------------|--------|--------|---------|" >> unit_test_summary.md
          echo "| $TOTAL_TESTS | $PASSED_TESTS | $FAILED_TESTS | $SKIPPED_TESTS |" >> unit_test_summary.md

      - name: Parse E2E test results for summary
        id: parse_e2e_test
        run: |
          # Extract summary of E2E test results
          TOTAL_TESTS=$(jq '.numTotalTests' e2e-test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' e2e-test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' e2e-test-results.json)
          SKIPPED_TESTS=$(jq '.numPendingTests' e2e-test-results.json)

          # Format the test results as a markdown table
          echo "### E2E Test Results Summary" > e2e_test_summary.md
          echo "| Total Tests | Passed | Failed | Skipped |" >> e2e_test_summary.md
          echo "|-------------|--------|--------|---------|" >> e2e_test_summary.md
          echo "| $TOTAL_TESTS | $PASSED_TESTS | $FAILED_TESTS | $SKIPPED_TESTS |" >> e2e_test_summary.md

      - name: Parse coverage report for summary
        id: parse_coverage
        run: |
          # Extract line and branch coverage percentage from Cobertura XML
          LINE_COVERAGE=$(xmllint --xpath "string(//coverage/@line-rate)" coverage/cobertura-coverage.xml)
          BRANCH_COVERAGE=$(xmllint --xpath "string(//coverage/@branch-rate)" coverage/cobertura-coverage.xml)

          # Convert to percentage and format to two decimal points
          LINE_COVERAGE_PERCENT=$(printf "%.2f" "$(echo "$LINE_COVERAGE * 100" | bc)")
          BRANCH_COVERAGE_PERCENT=$(printf "%.2f" "$(echo "$BRANCH_COVERAGE * 100" | bc)")

          # Format the coverage summary as a Markdown table
          echo "### Coverage Summary" > coverage_summary.md
          echo "| Metric          | Coverage |" >> coverage_summary.md
          echo "|-----------------|----------|" >> coverage_summary.md
          echo "| Line Coverage   | ${LINE_COVERAGE_PERCENT}% |" >> coverage_summary.md
          echo "| Branch Coverage | ${BRANCH_COVERAGE_PERCENT}% |" >> coverage_summary.md

      - name: Combine summaries and post as PR comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read summaries from files
          UNIT_TEST_SUMMARY=$(cat unit_test_summary.md)
          E2E_TEST_SUMMARY=$(cat e2e_test_summary.md)
          COVERAGE_SUMMARY=$(cat coverage_summary.md)

          # Add a note indicating that this is the latest report
          COMMENT_BODY="$UNIT_TEST_SUMMARY\n\n$E2E_TEST_SUMMARY\n\n$COVERAGE_SUMMARY\n\n**This is the latest test and coverage report.**"

          # Post comment on the PR or the push event (on PR or direct push)
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ "$PR_NUMBER" != "" ]; then
            # If it's a pull request, post the comment on the PR
            RESPONSE=$(curl -s -o response.txt -w "%{http_code}" \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
               "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")
          else
            # If it's a push, post the comment on the commit
            RESPONSE=$(curl -s -o response.txt -w "%{http_code}" \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
               "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments")
          fi

          if [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to post comment. HTTP Status: $RESPONSE"
            echo "Response Body:"
            cat response.txt
            exit 1
          else
            echo "Comment posted successfully."
          fi
