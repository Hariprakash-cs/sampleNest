name: Unit and Integration Tests with Full Report

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run unit tests and generate reports
        run: |
          # Run tests and output both JSON and cobertura XML for coverage
          npm test -- --coverage --coverageReporters=cobertura --json --outputFile=test-results.json

      - name: Parse test results for summary
        id: parse_test
        run: |
          # Extract summary of test results
          TOTAL_TESTS=$(jq '.numTotalTests' test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' test-results.json)
          SKIPPED_TESTS=$(jq '.numPendingTests' test-results.json)

          # Format the test results as a markdown table
          echo "### Test Results Summary" > test_summary.md
          echo "| Total Tests | Passed | Failed | Skipped |" >> test_summary.md
          echo "|-------------|--------|--------|---------|" >> test_summary.md
          echo "| $TOTAL_TESTS | $PASSED_TESTS | $FAILED_TESTS | $SKIPPED_TESTS |" >> test_summary.md

          # Set output for next steps
          echo "::set-output name=test_summary::$(cat test_summary.md)"

      - name: Parse coverage report for summary
        id: parse_coverage
        run: |
          # Extract line coverage percentage from cobertura XML
          COVERAGE_PERCENT=$(xmllint --xpath "string(//coverage/@line-rate)" coverage/cobertura-coverage.xml)
          COVERAGE_PERCENT=$(echo "$COVERAGE_PERCENT * 100" | bc)  # Convert to percentage

          # Format the coverage summary as a markdown table
          echo "### Coverage Summary" > coverage_summary.md
          echo "| Metric        | Coverage |" >> coverage_summary.md
          echo "|---------------|----------|" >> coverage_summary.md
          echo "| Line Coverage | ${COVERAGE_PERCENT}% |" >> coverage_summary.md

          # Set output for next steps
          echo "::set-output name=coverage_summary::$(cat coverage_summary.md)"

      - name: Combine summaries and post as PR comment
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Combine both summaries
          COMMENT_BODY="${{ steps.parse_test.outputs.test_summary }}\n\n${{ steps.parse_coverage.outputs.coverage_summary }}"
          PR_URL="${{ github.event.pull_request.url }}/comments"

          # Post the combined summary as a comment on the PR
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "{\"body\": \"$COMMENT_BODY\"}" \
               "$PR_URL"
