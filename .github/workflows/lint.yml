name: Unit and Integration Tests with Full Report

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  pull-requests: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run unit tests and generate reports
        run: |
          # Run tests and generate coverage reports
          npm test -- --coverage --coverageReporters=cobertura --json --outputFile=test-results.json

      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Parse test results for summary
        id: parse_test
        run: |
          # Extract summary of test results
          TOTAL_TESTS=$(jq '.numTotalTests' test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' test-results.json)
          SKIPPED_TESTS=$(jq '.numPendingTests' test-results.json)

          # Format the test results as a markdown table
          echo "### Unit Test Results Summary" > test_summary.md
          echo "| Total Tests | Passed | Failed | Skipped |" >> test_summary.md
          echo "|-------------|--------|--------|---------|" >> test_summary.md
          echo "| $TOTAL_TESTS | $PASSED_TESTS | $FAILED_TESTS | $SKIPPED_TESTS |" >> test_summary.md

      - name: Parse overall coverage metrics
        id: parse_overall_coverage
        run: |
          # Initialize counters for overall metrics
          TOTAL_STATEMENTS=0
          COVERED_STATEMENTS=0
          TOTAL_FUNCTIONS=0
          COVERED_FUNCTIONS=0

          # Extract class-level metrics and compute totals
          xmllint --xpath "//class" coverage/cobertura-coverage.xml | grep -oP 'filename="\K[^"]+' | while read -r file; do
            # Extract line rate (statement coverage rate)
            STATEMENT_RATE=$(xmllint --xpath "string(//class[@filename='$file']/@line-rate)" coverage/cobertura-coverage.xml)
            # Extract complexity (function coverage rate, if available)
            FUNCTION_RATE=$(xmllint --xpath "string(//class[@filename='$file']/@complexity)" coverage/cobertura-coverage.xml || echo 0)

            # Convert rates to total and covered metrics
            STATEMENTS_FROM_CLASS=1 # Default 1 statement for simplicity if no metadata
            COVERED_FROM_CLASS=$(echo "$STATEMENT_RATE * $STATEMENTS_FROM_CLASS" | bc)

            FUNCTIONS_FROM_CLASS=1 # Default 1 function for simplicity
            COVERED_FUNCTIONS_FROM_CLASS=$(echo "$FUNCTION_RATE * $FUNCTIONS_FROM_CLASS" | bc)

            # Accumulate totals
            TOTAL_STATEMENTS=$(echo "$TOTAL_STATEMENTS + $STATEMENTS_FROM_CLASS" | bc)
            COVERED_STATEMENTS=$(echo "$COVERED_STATEMENTS + $COVERED_FROM_CLASS" | bc)
            TOTAL_FUNCTIONS=$(echo "$TOTAL_FUNCTIONS + $FUNCTIONS_FROM_CLASS" | bc)
            COVERED_FUNCTIONS=$(echo "$COVERED_FUNCTIONS + $COVERED_FUNCTIONS_FROM_CLASS" | bc)
          done

          # Compute final coverage percentages
          OVERALL_STATEMENT_COVERAGE=$(echo "scale=2; ($COVERED_STATEMENTS / $TOTAL_STATEMENTS) * 100" | bc)
          OVERALL_FUNCTION_COVERAGE=$(echo "scale=2; ($COVERED_FUNCTIONS / $TOTAL_FUNCTIONS) * 100" | bc)

          # Save results for later steps
          echo "overall_statement_coverage=$OVERALL_STATEMENT_COVERAGE" >> $GITHUB_ENV
          echo "overall_function_coverage=$OVERALL_FUNCTION_COVERAGE" >> $GITHUB_ENV

      - name: Create Coverage Summary
        run: |
          echo "### Coverage Summary" > coverage_summary.md
          echo "| Metric              | Coverage |" >> coverage_summary.md
          echo "|---------------------|----------|" >> coverage_summary.md
          echo "| Statement Coverage  | $OVERALL_STATEMENT_COVERAGE% |" >> coverage_summary.md
          echo "| Function Coverage   | $OVERALL_FUNCTION_COVERAGE% |" >> coverage_summary.md

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: Coverage Report
          path: coverage_summary.md

      - name: Fail on insufficient coverage
        run: |
          REQUIRED_COVERAGE=1
          COVERAGE_PERCENT=$(xmllint --xpath "string(//coverage/@line-rate)" coverage/cobertura-coverage.xml)
          COVERAGE_PERCENT=$(echo "$COVERAGE_PERCENT * 100" | bc)  # Convert to percentage

          echo "Current Coverage: ${COVERAGE_PERCENT}%"
          echo "Required Coverage: ${REQUIRED_COVERAGE}%"

          if (( $(echo "$COVERAGE_PERCENT < $REQUIRED_COVERAGE" | bc -l) )); then
            echo "❌ Coverage is below the required threshold."
            echo "Current Coverage: ${COVERAGE_PERCENT}%"
            echo "Required Coverage: ${REQUIRED_COVERAGE}%"
            exit 1
          else
            echo "✅ Coverage meets the required threshold."
          fi

      - name: Parse detailed file-level coverage
        id: parse_file_coverage
        run: |
          # Initialize file-level coverage markdown
          echo "### Detailed Coverage Report by File" > file_coverage.md
          echo "|------|------------|----------|-----------|-------|--------------------|" >> file_coverage.md
          echo "| File | Statements | Branches | Lines | Uncovered Line #'s |" >> file_coverage.md

          # Parse detailed coverage for each file
          xmllint --xpath "//class" coverage/cobertura-coverage.xml | \
          grep -oP 'filename="\K[^"]+' | \
          while read -r file; do
            # Log the current file being processed
            echo "Processing file: $file"
            
            # Extract metrics for each file
            stmts=$(xmllint --xpath "string(//class[@filename='$file']/@line-rate)" coverage/cobertura-coverage.xml)
            branches=$(xmllint --xpath "string(//class[@filename='$file']/@branch-rate)" coverage/cobertura-coverage.xml)
            funcs=$(xmllint --xpath "string(//class[@filename='$file']/@function-rate)" coverage/cobertura-coverage.xml)
            lines=$(xmllint --xpath "string(//class[@filename='$file']/@line-rate)" coverage/cobertura-coverage.xml)
            uncovered_lines=$(xmllint --xpath "string(//class[@filename='$file']/@uncovered-line)" coverage/cobertura-coverage.xml)

            # Log extracted values for debugging
            echo "Statements Rate: $stmts"
            echo "Branches Rate: $branches"
            echo "Lines Rate: $lines"
            echo "Uncovered Lines: $uncovered_lines"
            
            # Convert rates to percentages
            stmts_pct=$(echo "$stmts * 100" | bc)
            branches_pct=$(echo "$branches * 100" | bc)
            funcs_pct=$(echo "$funcs * 100" | bc)
            lines_pct=$(echo "$lines * 100" | bc)

            # Log percentages for debugging
            echo "Statements Coverage: ${stmts_pct}%"
            echo "Branches Coverage: ${branches_pct}%"
            echo "Lines Coverage: ${lines_pct}%"

            # Append to file-level coverage markdown
            echo "| $file | ${stmts_pct}% | ${branches_pct}% | ${lines_pct}% | ${uncovered_lines} |" >> file_coverage.md
          done

      - name: Combine summaries and post as PR comment
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read summaries from files
          TEST_SUMMARY=$(cat test_summary.md)
          COVERAGE_SUMMARY=$(cat coverage_summary.md)
          FILE_COVERAGE=$(cat file_coverage.md)

          # Add a note indicating that this is the latest report
          COMMENT_BODY="$TEST_SUMMARY\n\n$COVERAGE_SUMMARY\n\n$FILE_COVERAGE\n\n**This is the latest test and coverage report.**"

          # Post comment on the PR or the push event (on PR or direct push)
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ "$PR_NUMBER" != "" ]; then
            # If it's a pull request, post the comment on the PR
            RESPONSE=$(curl -s -o response.txt -w "%{http_code}" \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
               "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments")
          else
            # If it's a push, post the comment on the commit
            RESPONSE=$(curl -s -o response.txt -w "%{http_code}" \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
               "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments")
          fi

          if [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to post comment. HTTP Status: $RESPONSE"
            echo "Response Body:"
            cat response.txt
            exit 1
          else
            echo "Comment posted successfully."
          fi
