name: Unit, Integration, and E2E Tests with Full Report

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run unit tests and generate reports
      - name: Run unit tests and generate coverage
        run: |
          npm test -- --coverage --coverageReporters=cobertura --json --outputFile=unit-test-results.json

      # Run E2E tests with coverage
      - name: Run E2E tests and collect coverage
        run: |
          # Instrument the code and run E2E tests
          npm run test:e2e

      # Generate E2E coverage report
      - name: Generate E2E coverage summary
        id: e2e_coverage
        run: |
          # Generate text-summary from E2E coverage
          npx nyc report --reporter=text-summary > e2e-coverage-summary.txt

          # Extract line coverage percentage
          LINE_COVERAGE=$(grep 'Lines' e2e-coverage-summary.txt | awk '{print $4}')
          echo "line_coverage=${LINE_COVERAGE}" >> $GITHUB_ENV

      # Parse unit test results for summary
      - name: Parse unit test results for summary
        id: parse_unit_test
        run: |
          # Extract unit test results
          TOTAL_TESTS=$(jq '.numTotalTests' unit-test-results.json)
          PASSED_TESTS=$(jq '.numPassedTests' unit-test-results.json)
          FAILED_TESTS=$(jq '.numFailedTests' unit-test-results.json)
          SKIPPED_TESTS=$(jq '.numPendingTests' unit-test-results.json)

          # Format as markdown
          echo "### Unit Test Results" > unit-test-summary.md
          echo "| Total | Passed | Failed | Skipped |" >> unit-test-summary.md
          echo "|-------|--------|--------|---------|" >> unit-test-summary.md
          echo "| $TOTAL_TESTS | $PASSED_TESTS | $FAILED_TESTS | $SKIPPED_TESTS |" >> unit-test-summary.md

      # Parse E2E test coverage for summary
      - name: Parse E2E test coverage for summary
        id: parse_e2e_coverage
        run: |
          # Read E2E coverage percentage from environment
          LINE_COVERAGE=$LINE_COVERAGE

          # Format as markdown
          echo "### E2E Coverage Results" > e2e-coverage-summary.md
          echo "| Metric       | Coverage |" >> e2e-coverage-summary.md
          echo "|--------------|----------|" >> e2e-coverage-summary.md
          echo "| Line Coverage| ${LINE_COVERAGE} |" >> e2e-coverage-summary.md

      # Combine summaries and post as PR comment
      - name: Combine summaries and post comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Combine test summaries
          UNIT_SUMMARY=$(cat unit-test-summary.md)
          E2E_SUMMARY=$(cat e2e-coverage-summary.md)

          COMMENT_BODY="$UNIT_SUMMARY\n\n$E2E_SUMMARY\n\n**This is the latest test and coverage report.**"

          # Post comment on the PR
          PR_NUMBER="${{ github.event.pull_request.number }}"
          if [ "$PR_NUMBER" != "" ]; then
            curl -s -o response.txt -w "%{http_code}" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          fi
